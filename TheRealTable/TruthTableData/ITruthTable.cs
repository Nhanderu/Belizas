using System;
using System.Collections.Generic;

namespace Nhanderu.TheRealTable.TruthTableData
{
    /// <summary>
    /// Represents a truth table generated by a formula.
    /// </summary>
    public interface ITruthTable
    {
        #region Operators
        /// <summary>
        /// Gets and sets the character that represents the operator "not".
        /// </summary>
        Char Not { get; set; }

        /// <summary>
        /// Gets and sets the character that represents the operator "and".
        /// </summary>
        Char And { get; set; }

        /// <summary>
        /// Gets and sets the character that represents the operator "or".
        /// </summary>
        Char Or { get; set; }

        /// <summary>
        /// Gets and sets the character that represents the operator "xor".
        /// </summary>
        Char Xor { get; set; }

        /// <summary>
        /// Gets and sets the character that represents the operator "if then".
        /// </summary>
        Char IfThen { get; set; }

        /// <summary>
        /// Gets and sets the character that represents the operator "then if".
        /// </summary>
        Char ThenIf { get; set; }

        /// <summary>
        /// Gets and sets the character that represents the operator "if and only if".
        /// </summary>
        Char IfAndOnlyIf { get; set; }

        /// <summary>
        /// Gets and sets the character that represents the opening bracket.
        /// </summary>
        Char OpeningBracket { get; set; }

        /// <summary>
        /// Gets and sets the character that represents the closing bracket.
        /// </summary>
        Char ClosingBracket { get; set; }
        #endregion

        #region Truth table data properties
        /// <summary>
        /// Gets the formula that rules the truth table.
        /// </summary>
        String Formula { get; set; }

        /// <summary>
        /// Gets a list of the arguments in the formula.
        /// </summary>
        IList<Char> Arguments { get; }

        /// <summary>
        /// Gets the values of the arguments in the formula.
        /// </summary>
        Boolean[,] ArgumentsValues { get; }

        /// <summary>
        /// Gets a list of the expressions in the formula.
        /// </summary>
        IList<String> Expressions { get; }

        /// <summary>
        /// Gets the values of the arguments in the formula.
        /// </summary>
        IList<Boolean[]> ExpressionsValues { get; }
        #endregion

        /// <summary>
        /// Verifies the formula, if it is under all the conditions to be a consistent truth table formula. 
        /// </summary>
        /// <param name="formula">The formula to be validated. If null, validate the formula that rules the instance.</param>
        /// <returns>True if the formula is under all the conditions, false if not.</returns>
        Boolean ValidateFormula(String formula = null);

        /// <summary>
        /// Returns all the operators.
        /// </summary>
        /// <param name="includeNot">If the not operator will be included in the enumeration.</param>
        /// <param name="includeBrackets">If the brackets will be included in the enumeration.</param>
        /// <returns>A list with all the operators.</returns>
        IList<Char> EnumerateOperators(Boolean includeNot = true, Boolean includeBrackets = true);

        /// <summary>
        /// Verifies if the following character represents any operator.
        /// </summary>
        /// <param name="character">The character to be verified.</param>
        /// <param name="includeNot">If the not operator will be included in the verification.</param>
        /// <param name="includeBrackets">If the brackets will be included in the verification.</param>
        /// <returns>True if the character is an operator, false if it isn't.</returns>
        Boolean IsAnOperator(Char character, Boolean includeNot = true, Boolean includeBrackets = true);

        /// <summary>
        /// Calculates the truth table using the formula.
        /// </summary>
        void Calculate();

        /// <summary>
        /// Generates a text that represents the truth table.
        /// </summary>
        /// <returns>The truth table in a text.</returns>
        String ToString();
    }
}
